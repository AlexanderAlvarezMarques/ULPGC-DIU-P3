package gui;

import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 * @author Alexander √Ålvarez Marques
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();

        min = checkInputType(inputFieldMin.getText());
        max = checkInputType(inputFieldMax.getText());

        setSliderConfiguration();
        initMatrix();

        super.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBase = new javax.swing.JPanel();
        panelConfiguration = new javax.swing.JPanel();
        labelMaxValues = new javax.swing.JLabel();
        labelMin = new javax.swing.JLabel();
        labelMax = new javax.swing.JLabel();
        inputFieldMin = new javax.swing.JTextField();
        inputFieldMax = new javax.swing.JTextField();
        panelSlider = new javax.swing.JPanel();
        labelSlider = new javax.swing.JLabel();
        inputSlider = new javax.swing.JSlider();
        labelValueSelectedInformation = new javax.swing.JLabel();
        inputSelectedValue = new javax.swing.JTextField();
        panelOutput = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textaeraMatrix = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        panelConfiguration.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuration"));

        labelMaxValues.setText("Values:");

        labelMin.setText("Min");

        labelMax.setText("Max");

        inputFieldMin.setText("0");
        inputFieldMin.setToolTipText("Minimum value generated for matrix");
        inputFieldMin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputFieldMinKeyTyped(evt);
            }
        });

        inputFieldMax.setText("10");
        inputFieldMax.setToolTipText("Maximum value generated for matrix");
        inputFieldMax.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputFieldMaxKeyTyped(evt);
            }
        });

        labelSlider.setText("Select minumum value to display");

        inputSlider.setToolTipText("Select the values to display on the matrix. Numbers lowers than selected values are not displayed.");
        inputSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                inputSliderStateChanged(evt);
            }
        });

        labelValueSelectedInformation.setText("Value selected:");

        inputSelectedValue.setText("jTextField1");
        inputSelectedValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputSelectedValueKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout panelSliderLayout = new javax.swing.GroupLayout(panelSlider);
        panelSlider.setLayout(panelSliderLayout);
        panelSliderLayout.setHorizontalGroup(
            panelSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSliderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSliderLayout.createSequentialGroup()
                        .addGroup(panelSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelSlider)
                            .addComponent(inputSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelSliderLayout.createSequentialGroup()
                        .addComponent(labelValueSelectedInformation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputSelectedValue, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        panelSliderLayout.setVerticalGroup(
            panelSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSliderLayout.createSequentialGroup()
                .addComponent(labelSlider)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelValueSelectedInformation)
                    .addComponent(inputSelectedValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelConfigurationLayout = new javax.swing.GroupLayout(panelConfiguration);
        panelConfiguration.setLayout(panelConfigurationLayout);
        panelConfigurationLayout.setHorizontalGroup(
            panelConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConfigurationLayout.createSequentialGroup()
                .addGroup(panelConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(labelMaxValues, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelConfigurationLayout.createSequentialGroup()
                        .addGroup(panelConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(inputFieldMin, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(labelMin, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(panelConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelMax, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                            .addComponent(inputFieldMax, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelConfigurationLayout.setVerticalGroup(
            panelConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConfigurationLayout.createSequentialGroup()
                .addComponent(labelMaxValues)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelMin)
                    .addComponent(labelMax))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputFieldMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputFieldMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addComponent(panelSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        panelOutput.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

        textaeraMatrix.setEditable(false);
        textaeraMatrix.setColumns(20);
        textaeraMatrix.setRows(5);
        jScrollPane1.setViewportView(textaeraMatrix);

        javax.swing.GroupLayout panelOutputLayout = new javax.swing.GroupLayout(panelOutput);
        panelOutput.setLayout(panelOutputLayout);
        panelOutputLayout.setHorizontalGroup(
            panelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        panelOutputLayout.setVerticalGroup(
            panelOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelBaseLayout = new javax.swing.GroupLayout(panelBase);
        panelBase.setLayout(panelBaseLayout);
        panelBaseLayout.setHorizontalGroup(
            panelBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBaseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(panelOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelConfiguration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelBaseLayout.setVerticalGroup(
            panelBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBaseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelConfiguration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelConfiguration.getAccessibleContext().setAccessibleName("");
        panelConfiguration.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_inputSliderStateChanged
        updateLabelValueSelected();
        printMatrix();
    }//GEN-LAST:event_inputSliderStateChanged

    private void inputFieldMinKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputFieldMinKeyTyped
        if (evt.getKeyChar() == '\n') {
            min = checkInputType(inputFieldMin.getText());
            
            changeMaxMinOrder();
            
            initMatrix();
            setSliderConfiguration();
        }
    }//GEN-LAST:event_inputFieldMinKeyTyped

    private void inputFieldMaxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputFieldMaxKeyTyped
        if (evt.getKeyChar() == '\n') {
            max = checkInputType(inputFieldMax.getText());
            
            changeMaxMinOrder();
            
            initMatrix();
            setSliderConfiguration();
        }
    }//GEN-LAST:event_inputFieldMaxKeyTyped

    private void inputSelectedValueKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputSelectedValueKeyTyped
        if (evt.getKeyChar() == '\n') {
            int value = checkInputType(inputSelectedValue.getText());

            if (value > max || value < min) {
                JOptionPane.showMessageDialog(null, "Invalid value");
                inputSelectedValue.setText("" + inputSlider.getValue());
            } else {
                inputSlider.setValue(value);
                printMatrix();
            }
        }
    }//GEN-LAST:event_inputSelectedValueKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    private void initMatrix() {

        for (int[] row : matrix) {
            for (int i = 0; i < row.length; i++) {
                row[i] = randomNumber();
            }
        }

        printMatrix();

    }

    private void printMatrix() {

        textaeraMatrix.setTabSize(4);

        String output = "";
        int minValueDisplay = inputSlider.getValue();

        for (int[] row : matrix) {

            StringBuilder sb = new StringBuilder();
            sb.append("| ");

            for (int value : row) {
                sb.append(value >= minValueDisplay ? value : "-");
                sb.append('\t');
            }

            output += sb.append("|").toString() + "\n";
        }

        textaeraMatrix.setText(output);

    }

    private void setSliderConfiguration() {

        inputSlider.setMinimum(min);
        inputSlider.setMaximum(max);
        inputSlider.setValue(min);

        int majorTick = (Math.abs(max) + Math.abs(min));
        int minorTick;

        if (majorTick >= 100) {
            majorTick = (majorTick / 100) * 10;
            minorTick = majorTick / 5;
            inputSlider.setPaintLabels(false);
        } else {
            majorTick = 10;
            minorTick = 2;
            inputSlider.setPaintLabels(true);
        }

        inputSlider.setMajorTickSpacing(majorTick);
        inputSlider.setMinorTickSpacing(minorTick);
        inputSlider.setPaintTicks(true);

        updateLabelValueSelected();
    }

    private void updateLabelValueSelected() {
        inputSelectedValue.setText("" + inputSlider.getValue());
    }
    
    private void changeMaxMinOrder() {
        if (max < min) {
            int aux = max;
            max = min;
            min = aux;
            inputFieldMin.setText("" + min);
            inputFieldMax.setText("" + max);
        }
    }

    private int checkInputType(String txt) {

        Pattern pattern = Pattern.compile("(?!\\D+)-?\\d+(?!\\D+)");
        Matcher search = pattern.matcher(txt);

        if (!search.find()) {
            JOptionPane.showMessageDialog(null, "Not a number found. Closing program.");
            System.exit(0);
        }

        return Integer.parseInt(txt);

    }

    private int randomNumber() {
        return new Random().nextInt(max - min) + min;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField inputFieldMax;
    private javax.swing.JTextField inputFieldMin;
    private javax.swing.JTextField inputSelectedValue;
    private javax.swing.JSlider inputSlider;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelMax;
    private javax.swing.JLabel labelMaxValues;
    private javax.swing.JLabel labelMin;
    private javax.swing.JLabel labelSlider;
    private javax.swing.JLabel labelValueSelectedInformation;
    private javax.swing.JPanel panelBase;
    private javax.swing.JPanel panelConfiguration;
    private javax.swing.JPanel panelOutput;
    private javax.swing.JPanel panelSlider;
    private javax.swing.JTextArea textaeraMatrix;
    // End of variables declaration//GEN-END:variables

    // Variables
    private int[][] matrix = new int[10][10];
    private int min;
    private int max;

}
